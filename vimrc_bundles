" Modeline and Notes {
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker spell:
"
" Environment {

    " Basics {
        set nocompatible        " Must be first line
        set background=dark     " Assume a dark background
    " }

    " Windows Compatible {
        " On Windows, also use '.vim' instead of 'vimfiles'; this makes synchronization
        " across (heterogeneous) systems easier.
        if has('win32') || has('win64')
          set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after

          " Be nice and check for multi_byte even if the config requires
          " multi_byte support most of the time
          if has("multi_byte")
            " Windows cmd.exe still uses cp850. If Windows ever moved to
            " Powershell as the primary terminal, this would be utf-8
            set termencoding=cp850
            " Let Vim use utf-8 internally, because many scripts require this
            set encoding=utf-8
            setglobal fileencoding=utf-8
            " Windows has traditionally used cp1252, so it's probably wise to
            " fallback into cp1252 instead of eg. iso-8859-15.
            " Newer Windows files might contain utf-8 or utf-16 LE so we might
            " want to try them first.
            set fileencodings=ucs-bom,utf-8,utf-16le,cp1252,iso-8859-15
          endif
        endif
    " }

"    " Setup Plug Support {
"        " The next three lines ensure that the ~/.vim/bundle/ system works
"        filetype off
"        set rtp+=~/.vim/bundle/vundle
"        " " " " " " call vundle#rc()
"        call vundle#begin() " } 
"    " Add an UnPlug command {
"    function! UnPlug(arg, ...)
"      let bundle = vundle#config#init_bundle(a:arg, a:000)
"      call filter(g:vundle#bundles, 'v:val["name_spec"] != "' . a:arg . '"')
"    endfunction
"
"    com! -nargs=+         UnPlug
"    \ call UnPlug(<args>)
    " }

" }

set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
" Plugin 'VundleVim/Vundle.vim'
call plug#begin('~/.vim/plugged')

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
" Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'
" Git plugin not hosted on GitHub
" Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
" Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
" Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
" Plugin 'ascenator/L9', {'name': 'newL9'}

" All of your Plugins must be added before the following line
" call vundle#end()            " required
" filetype plugin indent on    " required

" Plugs {

    " Deps {
        Plug 'gmarik/vundle'
    " }
"

    " General {
         Plug 'https://github.com/vimoutliner/vimoutliner.git'
         Plug 'scrooloose/nerdtree'
         Plug 'tpope/vim-surround'
         Plug 'https://github.com/tpope/vim-repeat.git'
         Plug 'ctrlpvim/ctrlp.vim'
"        Plug 'tacahiroy/ctrlp-funky'
"        Plug 'mbbill/undotree'
"        Plug 'powerline/fonts'
"         Plug 'bling/vim-bufferline'
         Plug 'easymotion/vim-easymotion'
"        Plug 'jistr/vim-nerdtree-tabs'
         Plug 'nathanaelkane/vim-indent-guides'
         Plug 'jeetsukumaran/vim-buffergator'
        "# Plug 'mhinz/vim-signify'
        "# Plug 'tpope/vim-abolish.git'
        "# Plug 'osyo-manga/vim-over'
"        Plug 'kana/vim-textobj-user'
"        Plug 'kana/vim-textobj-indent'
        "# Plug 'gcmt/wildfire.vim'
         Plug 'embear/vim-localvimrc'
         Plug 'https://github.com/pacha/vem-tabline.git'
         "Plug 'junegunn/fzf.vim'
    " }

    " Colors {
"        Plug 'flazz/vim-colorschemes'
        Plug 'altercation/vim-colors-solarized'
        Plug 'spf13/vim-colors'
        Plug 'https://github.com/reedes/vim-colors-pencil.git'
        Plug 'NLKNguyen/papercolor-theme'
        Plug 'muellan/am-colors'
        Plug 'josuegaleas/jay'
        Plug 'morhetz/gruvbox'
        Plug 'mkarmona/materialbox'
        Plug 'junegunn/seoul256.vim'
        Plug 'rakr/vim-one'
        Plug 'jonathanfilip/vim-lucius'
        Plug 'https://github.com/h3xx/vim-late_evening.git'
        Plug 'https://github.com/nielsmadan/harlequin.git'
        Plug 'https://github.com/tudurom/bleh.vim.git'
        Plug 'https://github.com/nightsense/seagrey.git'
        Plug 'https://github.com/nightsense/simplifysimplify.git'
        Plug 'https://github.com/alessandroyorba/despacio.git'
        Plug 'https://github.com/natanbro/browny_vim.git'
        "        Plug 'natanbro/vim-allomancer'
        Plug 'natanbro/vim-two-firewatch'


    " }
    "

    " Writing {
"        Plug 'reedes/vim-litecorrect'
"        Plug 'reedes/vim-textobj-sentence'
"        Plug 'reedes/vim-textobj-quote'
        "# Plug 'reedes/vim-wordy'
    " }


    " Misc {
        Plug 'tpope/vim-markdown'
        "Plug 'gabrielelana/vim-markdown.git'
        "Plug 'spf13/vim-preview'
"        Plug 'saltstack/salt-vim'
        Plug 'stephpy/vim-yaml'
        Plug 'https://github.com/digitalrounin/vim-yaml-folds.git'
        Plug 'https://github.com/tarekbecker/vim-yaml-formatter.git'
        Plug 'https://github.com/ervandew/supertab.git'
    " }
    "
    " Git {
        Plug 'https://github.com/tpope/vim-fugitive'
    " }
    "
    "
    " General Programming {
         Plug 'godlygeek/tabular'
"        Plug 'luochen1990/rainbow'
        if executable('ctags')
            Plug 'majutsushi/tagbar'
        endif
         Plug 'https://github.com/adelarsq/vim-matchit'
         Plug 'https://github.com/vim-syntastic/syntastic.git'
    " }
    "
    " Snippets & AutoComplete {
         Plug 'SirVer/ultisnips'
         Plug 'honza/vim-snippets'
    " }
    " Docker {
         Plug 'ekalinin/Dockerfile.vim'
    " }
    
    " Python {
        " Pick either python-mode or pyflakes & pydoc
"        Plug 'python-mode/python-mode.git'
"        "Plug 'klen/python-mode'
"        Plug 'yssource/python.vim'
"        Plug 'vim-scripts/python_match.vim'
"        Plug 'vim-scripts/pythoncomplete'
"        Plug 'davidhalter/jedi-vim'
        Plug 'ambv/black'
    " }
    "
    " GOLang {
        Plug 'https://github.com/fatih/vim-go.git'
    " }

    " HTML {
        Plug 'vim-scripts/HTML-AutoCloseTag'
        Plug 'hail2u/vim-css3-syntax'
        Plug 'gorodinskiy/vim-coloresque'
"        Plug 'tpope/vim-haml'
        Plug 'mattn/emmet-vim'
    " }

    " Javascript {
         Plug 'elzr/vim-json'
"        Plug 'groenewege/vim-less'
         Plug 'pangloss/vim-javascript'
"        Plug 'briancollins/vim-jst'
         Plug 'isRuslan/vim-es6'
"         Plug 'ternjs/tern_for_vim.git'
"         Plug 'leshill/vim-json.git'
                 
    "}
    "
    " vue.js {
        Plug 'posva/vim-vue'
"        Plug 'digitaltoad/vim-pug.git'
        Plug 'https://github.com/digitaltoad/vim-pug'
    " }
    
    " Typescript {
"        Plug 'Quramy/tsuquyomi'
"        Plug 'clausreinke/typescript-tools.vim'
    " }
    "
    " Trinity {
        " Plug 'wesleyche/Trinity.git'

    " }
    "
    " PlantUML {
"        Plug 'aklt/plantuml-syntax.git'
        Plug 'https://github.com/natanbro/plantuml-syntax.git'
    " }
"
    " Restructured text (rst)
    " {
"        Plug 'vim-scripts/rest.vim.git'
         Plug 'https://github.com/Rykka/riv.vim.git'
"        Plug 'vim-scripts/VOoM.git'
    " }
set nofoldenable
" call vundle#end()            " requiredA
call plug#end()
filetype plugin indent on    " required

